#!/usr/bin/env osascript
on run argv

  if count of argv is equal to 0 then
    set msg to "Usage:\n"
    set msg to msg & "  start, play [uri]  - Start playback / play uri\n"
    set msg to msg & "  pause, stop        - Stop playback\n"
    set msg to msg & "  play/pause         - Toggle playback\n"
    set msg to msg & "  next               - Next track\n"
    set msg to msg & "  previous, prev     - Previous track\n"
    set msg to msg & "  info               - Print track info\n"
    set msg to msg & "  jump N             - Jump to N seconds in the song\n"
    set msg to msg & "  forward N          - Jump N seconds forwards\n"
    set msg to msg & "  rewind N           - Jump N seconds backwards\n"
    set msg to msg & "  shuffle            - Toggle shuffle\n"
    set msg to msg & "  repeat             - Toggle repeat\n"
    set msg to msg & "  volume N           - Set Volume to N (0...100)\n"
    return msg
  end if

  set argument to item 1 of argv
  using terms from application "Spotify"
    set info to "error"

    if argument is equal to "play" or argument is equal to "start" then

      if count of argv is equal to 1 then
        tell application "Spotify" to play
      else
        set url to item 2 of argv
        tell application "Spotify" to play track url
      end if  

    else if argument is equal to "play/pause" then
      tell application "Spotify" to playpause
      return "toggled"

    else if argument is equal to "stop" or argument is equal to "pause" then
      tell application "Spotify" to pause
      return "paused"

    else if argument is equal to "next" then
      tell application "Spotify" to next track

    else if argument is equal to "previous" or argument is equal to "prev" then
      tell application "Spotify" to previous track

    else if argument is equal to "jump"
      set jumpTo to item 2 of argv as real
      tell application "Spotify"
        set trackMax to duration of current track

        if jumpTo > trackMax
          return "cannot jump past track"
        else if jumpTo < 0
          return "really?"
        end if

        set nextMinute to round (jumpTo / 60) rounding down
        set nextSecond to round (jumpTo mod 60) rounding down
        set player position to jumpTo
        return "jumped to " & nextMinute as text & "min " & nextSecond as text & "s"
      end tell
      
    else if argument is equal to "forward" or argument is equal to "ff"
      set jump to item 2 of argv as real
      tell application "Spotify"
        set playerPosition to player position
        set trackMax to duration of current track
        set jumpTo to playerPosition + jump
        
        if jumpTo > trackMax
          return "cannot jump past track"
        else if jumpTo < 0
          return "really?"
        end if
        
        set nextMinute to round (jumpTo / 60) rounding down
        set nextSecond to round (jumpTo mod 60) rounding down
        set player position to jumpTo
        return "jumped to " & nextMinute as text & "min " & nextSecond as text & "s"
      end tell
      
    else if argument is equal to "rewind" or argument is equal to "rw"
      set jump to item 2 of argv as real
      tell application "Spotify"
        set playerPosition to player position
        set trackMax to duration of current track
        set jumpTo to playerPosition - jump

        if jumpTo > trackMax
          return "cannot jump past track"
        else if jumpTo < 0
          return "really?"
        end if

        set nextMinute to round (jumpTo / 60) rounding down
        set nextSecond to round (jumpTo mod 60) rounding down
        set player position to jumpTo
        return "jumped to " & nextMinute as text & "min " & nextSecond as text & "s"
      end tell
      
    else if argument is equal to "volume" then
      set theNewVolume to item 2 of argv as real
      if theNewVolume < 0 then set theNewVolume to 0
      if theNewVolume > 100 then set theNewVolume to 100
      tell application "Spotify"
        set sound volume to theNewVolume
      end tell
      return "set volume to " & theNewVolume
    
    else if argument is equal to "shuffle" then
      tell application "Spotify"
        set isShuffling to not isShuffling
        return "is shuffling: " & isShuffling
      end tell

    else if argument is equal to "repeat" then
      tell application "Spotify"
        set isRepeating to not isRepeating
        return "is repeating: " & isRepeating
      end tell
      
    else if argument is equal to "info" then
      tell application "Spotify" 
        set theTrack to name of current track
        set theArtist to artist of current track
        set theAlbum to album of current track
        set trackMinute to round (duration of current track / 60) rounding down
        set trackSecond to duration of current track mod 60
        set trackTime to trackMinute as text & "min " & trackSecond as text & "s"
        set currentMinute to round (player position / 60) rounding down
        set currentSecond to round (player position mod 60) rounding down
        set currentTime to currentMinute as text & "min " & currentSecond as text & "s"
        set info to "Current track:"
        set info to info & "\n Artist:       " & theArtist
        set info to info & "\n Track:        " & theTrack
        set info to info & "\n Album:        " & theAlbum 
        set info to info & "\n URI:          " & spotify url of current track
        set info to info & "\n Duration:     " & trackTime & " ("& duration of current track & " seconds)" 
        set info to info & "\n Currently at: " & currentTime
        set info to info & "\n Player:       " & player state
        set info to info & "\n Volume:       " & sound volume
        if isShuffling then set info to info & "\n Shuffle is on."
        if isRepeating then set info to info & "\n Repeat is on."
      end tell
      return info
    end if
    
    tell application "Spotify"
      set shuffling to ""
      if isShuffling then set shuffling to "\n[shuffle on]"
      if player state as text is equal to "playing"
        return "Now playing: " & artist of current track & " - " & name of current track & shuffling
      end if
    end tell

  end using terms from

end run
